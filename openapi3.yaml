openapi: 3.0.0
info:
  title: CRM API v1.0.0
  description: "<!--\nauthorLink: 'https://github.com/novakzaballa'\nauthorName: 'Novak Zaballa'\nDate: 'Apr 16 2020'\n-->\n\n# CRM REST API code example\n\n## Author: Novak Zaballa\n\nThe scope of this sample code project is users and customers management of a CRM.\n\nThis project has been built with Serverless Framework and targeting AWS lambda with Node.js + DynamoDB. You can deploy the proyect to AWS installing and configuring serverless, or you can run the services locally, using the [serverless-offline](https://github.com/dherault/serverless-offline) plugin, which is included. The offline configuration also includes a local DynamoDB instance is provided by the [serverless-dynamodb-local](https://github.com/99xt/serverless-dynamodb-local) plugin.\n\n## Setup and test locally\n\nTo test your service locally, without having to deploy it first, you will need node.js (tested with v13.7.0) and follow the steps below in the root directory of the project.\n\n```bash\nnpm install\nserverless dynamodb install\nserverless dynamodb start --migrate\n```\n\nThe --migrate option creates the schema. Ctl+C to stop the local DynamoDB. The DB schema and data will be lost since by default the local DB is stored in memory.\n\n## Run service offline\n\nTo test the project locally use:\n\n```bash\nserverless offline start\n```\n\nAlternatively you can debug the project with VS Code. This repository includes the launch.json file needed by VS Code to run and debug this serverless project locally. How ever dynamodb needs to be started.\n\n## Configure and Deploy service to AWS\n\nFor production you will need to configure authetication the OAuth 2 provider. Replace the file oauth2_public_key.pem in the root directory with the right public signature PEM file. Also cnfigure the file secrets.json with the corresponding OAUTH_AUDIENCE value.\n\nTo deploy the service you need an account in AWS. Use the following command:\n\n```bash\nserverless deploy -v\n```  \n\n### Authorization for testing\n\nEvery request must include an authorization header containing the OAuth Bearer token. For testing purposes currently an Auth0 account is in use,  The request content type must be application/json as per the examples below. While in dev stage, I will provide valid access token of quarklap user (with only customer priveleges and not users admin permissions) via slack channel.\n\n### Live Demo\n\nYou can test locally following the former instructions, however it is also a live test  in my aws account. Change the Servers to https://mspjeecyw1.execute-api.us-east-1.amazonaws.com/dev/api in order to use it, and get a valid toket for user with email = zaballa.novak@gmail.com and password= Myt3stPass#, to start testing. Admin credentials will be provided via email or slack.\n\n"
  contact: {}
  version: '1.0'
servers:
- url: https://mspjeecyw1.execute-api.us-east-1.amazonaws.com/dev/api
  variables: {}
- url: http://localhost:3000/dev/api
  variables: {}
paths:
  /authorize:
    post:
      tags:
      - Authenticate User
      summary: Authenticate user
      description: If email and password are correct, returns an access token to be used in future calls to API.  
      operationId: Authorizeexample
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeexampleRequest'
            example:
              email: zaballa.novak@gmail.com
              password: Myt3stPass#
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
      security: []
  /users/role:
    post:
      tags:
      - Users Management
      summary: setUserRole
      description: Set the role of an user in IDP (Auth0)
      operationId: setUserRole
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setUserRoleRequest'
            example:
              email: zaballa.novak@gmail.com
              role: user
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /users:
    post:
      tags:
      - Users Management
      summary: createUser
      description: Create a user in the IDP (Auth0)
      operationId: createUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
            example:
              email: zaballa.novak@gmail.com
              password: Myt3stPass#
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    get:
      tags:
      - Users Management
      summary: listUsers
      description: List users from IDP (Auth0)
      operationId: listUsers
      parameters:
      - name: per_page
        in: query
        description: 'Number of users returned per page'
        required: true
        style: form
        explode: true
        schema:
          type: integer
          example: 50
      - name: page
        in: query
        description: '0 to get first page.'
        required: true
        style: form
        explode: true
        schema:
          type: integer
          example: '0'
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /users/{userId}:
    delete:
      tags:
      - Users Management
      summary: deleteUser
      description: Delete user from Auth0 IDP
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the user to delete
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    put:
      tags:
      - Users Management
      summary: updateUser
      description: 'Update data of an IDP user '
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: 'ID of the user to be updated'
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserRequest'
            example:
              given_name: Jhon E.
              family_name: Doe Oe
              password: MyT3stPass#
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /customers:
    post:
      tags:
      - Customers API
      summary: createCustomer
      description: Creates a customer in the CRM database
      operationId: createCustomer
      parameters: []
      requestBody:
        description: 'Add new customer to the CRM'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putCustomerRequest'
            example:
              Name: Pedro Pablo
              Surname: Marmol
              Phone: (234)534543 654
              Email: pmarmol@midominio.com
              Age: 43
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    get:
      tags:
      - Customers API
      summary: listCustomers
      description: List Customers from Database.
      operationId: listCustomers
      parameters:
      - name: pageSize
        in: query
        description: 'Number of customers to be returned in every call to this endpoint.'
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 3
      - name: startKey
        in: query
        description: 'Optional, Empty or lastkey field returned by a previous call to this endpoint'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /customers/{customerId}:
    get:
      tags:
      - Customers API
      summary: getCustomer
      description: Get one Customer from DynamoDB table.
      operationId: getCustomer
      parameters:
      - name: customerId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the customer to get data from
        example: "243432324"
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    delete:
      tags:
      - Customers API
      summary: deleteCustomer
      description: Deletes a determined customer by its ID
      operationId: deleteCustomer
      parameters:
      - name: customerId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the customer to get data from
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    put:
      tags:
      - Customers API
      summary: updateCustomer
      description: Update an existing customer in DynamoDB
      operationId: updateCustomer
      parameters:
      - name: customerId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the customer to be updated.
        example: "243432324"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCustomerRequest'
            example:
              Name: Jorge Raul
              Surname: Thousand
              Age: 52
              Email: tmorning@midominio.com
              Phone: (122)23878 343
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /customers/{customerId}/photo:
    put:
      tags:
      - Customers API
      summary: addCustomerPhoto
      description: Add a photo in S3 to an existing Customer
      operationId: addCustomerPhoto
      parameters:
      - name: customerId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the customer to be updated with a new photo.
        example: "243432324"
      requestBody:
        description: 'Base64 encoded JPG, PNG or GIF Image . Max size configured in settings.json. (150KB default)'
        content:
          text/plain:
            schema:
              type: string
              example: /9jr/4AAQSkZJRgABAgAAAQABAAD/7QCcUGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAI.....
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    get:
      tags:
      - Customers API
      summary: getCustomerPhoto
      description: Get the customer photo in S3.
      operationId: getCustomerPhoto
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          example: image/jpeg
      - name: customerId
        in: path
        style: simple
        schema:
          type: string
        required: true
        description: Alphanumeric ID of the customer to be updated with a new photo.
        example: "243432324"
      responses:
        200:
          description: 'Image returned'
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
          headers: {}
      deprecated: false
components:
  schemas:
    setUserRoleRequest:
      title: setUserRoleRequest
      required:
      - email
      - role
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          format: anyof ["user","admin"]
      example:
        email: zaballa.novak@gmail.com
        role: user
    createUserRequest:
      title: createUserRequest
      required:
      - given_name
      - family_name
      - email
      - password
      type: object
      properties:
        given_name:
          type: string
        family_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        given_name: Jhon
        family_name: Doe
        email: jhondoe@mydomain.com.bo
        password: Myt3stPass#
    updateUserRequest:
      title: updateUserRequest
      description: Requieres any of the following
      type: object
      properties:
        given_name:
          type: string
        family_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        blocked: 
          type: boolean
      example:
        given_name: Jhon E.
        family_name: Doe Oe
        password: MyT3stPass#
    AuthorizeexampleRequest:
      title: AuthorizeexampleRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        email: zaballa.novak@gmail.com
        password: Myt3stPass#
    putCustomerRequest:
      title: putCustomerRequest
      required:
      - Name
      - Surname
      - Phone
      - Email
      - Age
      type: object
      properties:
        Name:
          type: string
          minLength: 2
          maxLength: 255
        Surname:
          type: string
          minLength: 2
          maxLength: 255
        Phone:
          type: string
          format: phonenumber
        Email:
          type: string
          format: email
        Age:
          type: integer
          minimum: 16
          maximum: 110
      example:
        Name: Pedro Pablo
        Surname: Marmol
        Phone: (234)534543 654
        Email: pmarmol@midominio.com
        Age: 43
    updateCustomerRequest:
      title: updateCustomerRequest
      required:
      - Name
      - Surname
      - Age
      - Email
      - Phone
      type: object
      properties:
        Name:
          type: string
          minLength: 2
          maxLength: 255
        Surname:
          type: string
          minLength: 2
          maxLength: 255
        Phone:
          type: string
          format: phonenumber
        Email:
          type: string
          format: email
        Age:
          type: integer
          format: int32
          minimum: 16
          maximum: 110
      example:
        Name: Jorge Raul
        Surname: Thousand
        Age: 52
        Email: tmorning@midominio.com
        Phone: (122)23878 343
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
security:
- bearerAuth: []
tags:
- name: Authenticate User
- name: Customers API
- name: Users Management

"use strict";
import {
  APIGatewayProxyWithLambdaAuthorizerEvent,
  APIGatewayProxyResult,
  APIGatewayEventRequestContextWithAuthorizer,
  APIGatewayEventLambdaAuthorizerContext,
} from "aws-lambda";
import { Customer } from "../../../classes/customer";
import * as jestPlugin from "serverless-jest-plugin";
import { putCustomer, TAuthorizerContext } from "../putCustomer";

// tests for putCustomer
// Generated by serverless-jest-plugin

const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap({ putCustomer }, { handler: "putCustomer" });

describe("putCustomer", () => {
  beforeAll((done) => {
    //  lambdaWrapper.init(liveFunction); // Run the deployed lambda
    done();
  });
  let mockReqContext: APIGatewayEventRequestContextWithAuthorizer<APIGatewayEventLambdaAuthorizerContext<
    TAuthorizerContext>> = {
    authorizer: { principalId: "JestTestingUser", integrationLatency: 1 },
    accountId: null,
    apiId: null,
    protocol: null,
    httpMethod: null,
    identity:null,
    path:null,
    stage:null,
    requestId:null,
    requestTimeEpoch: null,
    resourceId: null,
    resourcePath: null
  };
  let mockEvent: APIGatewayProxyWithLambdaAuthorizerEvent<TAuthorizerContext> = {
    httpMethod: "POST",
    headers: null,
    multiValueHeaders: null,
    isBase64Encoded: null,
    path: null,
    pathParameters: null,
    queryStringParameters: null,
    multiValueQueryStringParameters: null,
    stageVariables: null,
    //event.requestContext.authorizer.principalId
    requestContext: mockReqContext,
    resource: null,
    body: null
  };

  const event1: APIGatewayProxyWithLambdaAuthorizerEvent<TAuthorizerContext> = Object.create(mockEvent);
  event1.body = `\{"CustomerId":"4532324",
      "Name":"Paul Ray",
      "Surname":"Ghost",
      "Phone":"(122)23878 343",
      "Email":"pghost@midominio.com",
      "Age":2}`

  it("Integration: Throws Bad Request (Status 400) when Age < 16", () => {
    return wrapped
      .run(
        event1 as APIGatewayProxyWithLambdaAuthorizerEvent<TAuthorizerContext>
      )
      .then((response) => {
        const statusCode: number = (response as APIGatewayProxyResult)
          .statusCode;
        const validationError: String = (response as APIGatewayProxyResult).body.slice(
          -40
        );
        expect(statusCode).toBe(400);
        expect(validationError).toBe(
          `{\"min\":\"Age must not be less than 16\"}}]`
        );
      });
  });

  const event2: APIGatewayProxyWithLambdaAuthorizerEvent<TAuthorizerContext> = Object.create(mockEvent);
  event2.body = `\{"CustomerId":"4532324",
  "Name":"Paul Ray",
  "Surname":"Ghost",
  "Phone":"(122)23878 343",
  "Email":"pghost@midominio.com",
  "Age":22}`;
  console.log("event2:", event2);

  it("Integration: Adds a well formed customer with status 200", () => {
    return wrapped
      .run(
        event2
      )
      .then(async (response) => {
        const statusCode: number = (response as APIGatewayProxyResult)
          .statusCode;
        const responseCustomer: Customer = new Customer();
        Object.assign<Customer, any>(
          responseCustomer,
          JSON.parse((response as APIGatewayProxyResult).body)
        );
        expect(statusCode).toBe(201);
        expect(await responseCustomer.validateSchema()).toBe("OK");
      });
  });

  it("Integration: Adds a well formed customer with status 200", () => {
    process.env.IS_OFFLINE = "false"
    return wrapped
      .run(
        event2
      )
      .then(async (response) => {
        const statusCode: number = (response as APIGatewayProxyResult)
          .statusCode;
        const responseCustomer: Customer = new Customer();
        Object.assign<Customer, any>(
          responseCustomer,
          JSON.parse((response as APIGatewayProxyResult).body)
        );
        expect(statusCode).toBe(201);
        expect(await responseCustomer.validateSchema()).toBe("OK");
      });
  });

});


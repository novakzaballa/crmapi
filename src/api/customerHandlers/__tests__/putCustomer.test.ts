'use strict';
import { APIGatewayEvent, APIGatewayProxyResult } from "aws-lambda"
import { Customer } from "../../../classes/customer";

// tests for putCustomer
// Generated by serverless-jest-plugin

const mod = require('../putCustomer');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'putCustomer' });

describe('putCustomer', () => {
  beforeAll((done) => {
//  lambdaWrapper.init(liveFunction); // Run the deployed lambda
    
    done();
  });
  let event1: any = {
    httpMethod: "POST",
    body: 
    `\{"CustomerId":"4532324",
      "Name":"Paul Ray",
      "Surname":"Ghost",
      "Phone":"(122)23878 343",
      "Email":"pghost@midominio.com",
      "Age":2}`
  };

  it('Integration: Throws Bad Request (Status 400) when Age < 16', () => {
    return wrapped.run(event1 as APIGatewayEvent).then((response) => {
      const statusCode:number = (response as APIGatewayProxyResult).statusCode;
      const validationError:String = (response as APIGatewayProxyResult).body.slice(-40);
      expect(statusCode).toBe(400);
      expect(validationError).toBe(`{\"min\":\"Age must not be less than 16\"}}]`);
    });
  });

  let event2: any = {
    httpMethod: "POST",
    body: 
    `\{"CustomerId":"4532324",
      "Name":"Paul Ray",
      "Surname":"Ghost",
      "Phone":"(122)23878 343",
      "Email":"pghost@midominio.com",
      "Age":22}`
  };
    it('Integration: Adds a well formed customer with status 200', () => {
    return wrapped.run(event2 as APIGatewayEvent).then(async (response) => {
      const statusCode:number = (response as APIGatewayProxyResult).statusCode;
      const responseCustomer:Customer = new Customer;
      Object.assign<Customer, any>(responseCustomer, JSON.parse((response as APIGatewayProxyResult).body));
      expect(statusCode).toBe(200);
      expect(await responseCustomer.validateCustomer()).toBe("OK");
    });
  });

});

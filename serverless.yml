service:
  name: crmapi
  stage: dev
  region: us-east-1
# app and org for use with dashboard.serverless.com
  app: customersApi
  org: amtest

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  tableNames:
    Customers: ${self:provider.environment.CUSTOMER_TABLE}
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  endpoints:
    dynamodb-url: 'http://localhost:8000'

# Add the serverless-webpack plugin
plugins:
  - serverless-jest-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CUSTOMER_TABLE: "${opt:stage, self:provider.stage}-CustomersTable"
    USERS_TABLE: "${opt:stage, self:provider.stage}-UsersTable"
    AWS_REGION_CONF: "${opt:region, self:provider.region}"
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb-url}
    OAUTH_AUDIENCE: ${file(./secrets.json):OAUTH_AUDIENCE}
    OAUTH_CLIENT_PUBLIC_KEY: ${file(./oauth2_public_key.pem)}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
     # Resource: "*"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}"
functions:
  putCustomer:
    handler: src/api/customerHandlers/putCustomer.putCustomer
    events:
      - http:
          method: post
          path: api/customers
          authorizer: authorizerFunc
  authorizerFunc:
    handler: src/common/authorizerFunc.authorizerFunc

resources:
  Resources:
    Customers:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CUSTOMER_TABLE}
        AttributeDefinitions:
          - AttributeName: GroupId
            AttributeType: S
          - AttributeName: CustomerId
            AttributeType: S
        KeySchema:
          - AttributeName: GroupId
            KeyType: HASH
          - AttributeName: CustomerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  # Authorizer Responses        
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

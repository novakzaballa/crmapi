service:
  name: crmapi
  stage: dev
  region: us-east-1
# app and org for use with dashboard.serverless.com
  app: customersApi
  org: amtest

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  tableNames:
    Customers: ${self:provider.environment.CUSTOMER_TABLE}
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  endpoints:
    dynamodb-url: 'http://localhost:8000'

# Add the serverless-webpack plugin
plugins:
  - serverless-jest-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 256 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CUSTOMER_TABLE: "${opt:stage, self:provider.stage}-CustomersTable"
#   USERS_TABLE: "${opt:stage, self:provider.stage}-UsersTable"
    AWS_REGION_CONF: "${opt:region, self:provider.region}"
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb-url}
    OAUTH_AUDIENCE: ${file(./secrets.json):OAUTH_AUDIENCE}
    OAUTH_CLIENT_ID: ${file(./secrets.json):OAUTH_CLIENT_ID}
    OAUTH_DOMAIN: ${file(./secrets.json):OAUTH_DOMAIN}
    OAUTH_CLIENT_SECRET: ${file(./secrets.json):OAUTH_CLIENT_SECRET}
    OAUTH_CLIENT_PUBLIC_KEY: ${file(./oauth2_public_key.pem)}
    MAX_PHOTO_SIZE: ${file(./settings.json):MAX_PHOTO_SIZE}
    S3_BUCKET_NAME: "${opt:stage, self:provider.stage}-crmapi-photo-bucket"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - s3:*
      Resource: "*"
      #Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}"

functions:
  authorizerFunc:
    handler: src/common/authorizerFunc.authorizerFunc

  createCustomer:
    handler: src/api/customerHandlers/createCustomer.createCustomer
    events:
      - http:
          method: post
          path: api/customers
          authorizer:
            name: authorizerFunc
  updateCustomer:
    handler: src/api/customerHandlers/updateCustomer.updateCustomer
    events:
      - http:
          method: put
          path: api/customers/{id}
          authorizer:
            name: authorizerFunc

  deleteCustomer:
    handler: src/api/customerHandlers/deleteCustomer.deleteCustomer
    events:
      - http:
          method: delete
          path: api/customers/{id}
          authorizer:
            name: authorizerFunc

  getCustomer:
    handler: src/api/customerHandlers/getCustomer.getCustomer
    events:
      - http:
          method: get
          path: api/customers/{id}
          authorizer:
            name: authorizerFunc

  listCustomers:
    handler: src/api/customerHandlers/listCustomers.listCustomers
    events:
      - http:
          method: get
          path: api/customers
          authorizer:
            name: authorizerFunc

  addCustomerPhoto:
    handler: src/api/customerHandlers/addCustomerPhoto.addCustomerPhoto
    events:
      - http:
          method: put
          path: api/customers/{id}/photo
          authorizer:
            name: authorizerFunc

  getCustomerPhoto:
    handler: src/api/customerHandlers/getCustomerPhoto.getCustomerPhoto
    events:
      - http:
          method: get
          path: api/customers/{id}/photo

  listUsers:
    handler: src/api/userHandlers/listUsers.listUsers
    events:
      - http:
          method: get
          path: api/users
          authorizer:
            name: authorizerFunc
    
  createUser:
    handler: src/api/userHandlers/createUser.createUser
    events:
      - http:
          method: post
          path: api/users
          authorizer:
            name: authorizerFunc

  updateUser:
    handler: src/api/userHandlers/updateUser.updateUser
    events:
      - http:
          method: put
          path: api/users/{id}
          authorizer:
            name: authorizerFunc

  deleteUser:
    handler: src/api/userHandlers/deleteUser.deleteUser
    events:
      - http:
          method: delete
          path: api/users/{id}
          authorizer:
            name: authorizerFunc

  deleteUserByEmail:
    handler: src/api/userHandlers/deleteUserByEmail.deleteUserByEmail
    events:
      - http:
          method: delete
          path: api/users
          authorizer:
            name: authorizerFunc

  setUserRole:
    handler: src/api/userHandlers/setUserRole.setUserRole
    events:
      - http:
          method: post
          path: api/users/role
          authorizer:
            name: authorizerFunc

  authenticateUser:
    handler: src/api/userHandlers/authenticateUser.authenticateUser
    events:
      - http:
          method: post
          path: api/authorize

resources:
  Resources:
    S3PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}

    Customers:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CUSTOMER_TABLE}
        AttributeDefinitions:
          - AttributeName: GroupId
            AttributeType: S
          - AttributeName: CustomerId
            AttributeType: S
        KeySchema:
          - AttributeName: GroupId
            KeyType: HASH
          - AttributeName: CustomerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  # Authorizer Responses        
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
